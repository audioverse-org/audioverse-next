@import '../../styles/common';

.base {
	display: flex;
	flex-direction: column;
	overflow: hidden;
	margin-bottom: 48px;
	border-radius: 16px;

	&:not(.center) {
		.media + .content {
			display: flex;
			flex-direction: column;
			align-items: flex-start;
			justify-content: center;
			margin: 16px;
			@media (min-width: $breakpoint-xl) {
				margin: 48px;
			}
		}
	}

	@media (min-width: $breakpoint-md) {
		display: grid;
		grid-template-columns: auto 1fr 1fr auto;
		grid-template-areas: '. content media .';
	}
}

.media {
	position: relative;
	display: flex;

	& > img {
		object-fit: cover;
		width: 100%;
		height: 100%;
		display: block;
	}

	@media (min-width: $breakpoint-md) {
		grid-area: media;
		.tall & {
			height: 100%;
		}
	}
}

.base:not(.short) .media {
	aspect-ratio: 1/1;
	@supports not (aspect-ratio: 1 / 1) {
		> * {
			height: 0 !important;
			padding-top: 100% !important;
		}
	}
}

.content {
	p {
		font-size: 17px;
		line-height: 21.78px;
	}

	@media (min-width: $breakpoint-md) {
		grid-area: content;
		min-width: 0;
	}
	@media (min-width: $breakpoint-lg) and (max-width: #{$breakpoint-xl - 1px}) {
		h1 {
			margin-bottom: 8px;
			font-size: 33px;
		}
	}
	@media (min-width: $breakpoint-lg) {
		p {
			font-size: 18px;
		}
	}
}

.bleed {
	grid-template-areas:
		'. . media media'
		'. content media media'
		'. . media media';
}

.center {
	text-align: center;
	grid-template-columns: auto 1fr auto;
	grid-template-areas:
		'. . .'
		'. media .'
		'. content .'
		'. . .';

	& > * {
		&:last-child {
			padding-bottom: 0;
		}
	}
}

.reverse {
	@media (min-width: $breakpoint-md) {
		grid-template-areas:
			'. . . .'
			'. media content .'
			'. . . .';
		&.bleed {
			grid-template-areas:
				'media media . .'
				'media media content .'
				'media media . .';
		}
		&.center {
			grid-template-areas:
				'. . .'
				'. content .'
				'. media .'
				'. . .';
		}
		&.center.bleed {
			grid-template-areas:
				'. . .'
				'. content .'
				'media media media'
				'media media media';
		}
	}
}

.dark {
	background-color: $ts-dark;
	color: white;
}

.lightTone {
	background-color: $ts-lightTone;
}

.cream {
	background-color: $ts-cream;
}
